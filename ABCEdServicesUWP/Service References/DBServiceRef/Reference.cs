//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace ABCEdServicesUWP.DBServiceRef {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Student", Namespace="http://schemas.datacontract.org/2004/07/ABCEndServiceLib.DB")]
    public partial class Student : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime DateEnrolledField;
        
        private string StduentNameField;
        
        private string StudentIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateEnrolled {
            get {
                return this.DateEnrolledField;
            }
            set {
                if ((this.DateEnrolledField.Equals(value) != true)) {
                    this.DateEnrolledField = value;
                    this.RaisePropertyChanged("DateEnrolled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StduentName {
            get {
                return this.StduentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StduentNameField, value) != true)) {
                    this.StduentNameField = value;
                    this.RaisePropertyChanged("StduentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StudentID {
            get {
                return this.StudentIDField;
            }
            set {
                if ((object.ReferenceEquals(this.StudentIDField, value) != true)) {
                    this.StudentIDField = value;
                    this.RaisePropertyChanged("StudentID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Course", Namespace="http://schemas.datacontract.org/2004/07/ABCEndServiceLib.DB")]
    public partial class Course : object, System.ComponentModel.INotifyPropertyChanged {
        
        private decimal CostField;
        
        private string CourseIDField;
        
        private string CourseNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Cost {
            get {
                return this.CostField;
            }
            set {
                if ((this.CostField.Equals(value) != true)) {
                    this.CostField = value;
                    this.RaisePropertyChanged("Cost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CourseID {
            get {
                return this.CourseIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CourseIDField, value) != true)) {
                    this.CourseIDField = value;
                    this.RaisePropertyChanged("CourseID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CourseName {
            get {
                return this.CourseNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CourseNameField, value) != true)) {
                    this.CourseNameField = value;
                    this.RaisePropertyChanged("CourseName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Enrollment", Namespace="http://schemas.datacontract.org/2004/07/ABCEndServiceLib.DB")]
    public partial class Enrollment : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CourseIDField;
        
        private string GradeField;
        
        private string StudentIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CourseID {
            get {
                return this.CourseIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CourseIDField, value) != true)) {
                    this.CourseIDField = value;
                    this.RaisePropertyChanged("CourseID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Grade {
            get {
                return this.GradeField;
            }
            set {
                if ((object.ReferenceEquals(this.GradeField, value) != true)) {
                    this.GradeField = value;
                    this.RaisePropertyChanged("Grade");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StudentID {
            get {
                return this.StudentIDField;
            }
            set {
                if ((object.ReferenceEquals(this.StudentIDField, value) != true)) {
                    this.StudentIDField = value;
                    this.RaisePropertyChanged("StudentID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DBServiceRef.IDBService")]
    public interface IDBService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBService/InsertAStudent", ReplyAction="http://tempuri.org/IDBService/InsertAStudentResponse")]
        System.Threading.Tasks.Task<int> InsertAStudentAsync(ABCEdServicesUWP.DBServiceRef.Student s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBService/InsertACourse", ReplyAction="http://tempuri.org/IDBService/InsertACourseResponse")]
        System.Threading.Tasks.Task<int> InsertACourseAsync(ABCEdServicesUWP.DBServiceRef.Course c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBService/InsertEnrolment", ReplyAction="http://tempuri.org/IDBService/InsertEnrolmentResponse")]
        System.Threading.Tasks.Task<int> InsertEnrolmentAsync(ABCEdServicesUWP.DBServiceRef.Enrollment e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBService/GetAllStudents", ReplyAction="http://tempuri.org/IDBService/GetAllStudentsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ABCEdServicesUWP.DBServiceRef.Student>> GetAllStudentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBService/GetAllCourses", ReplyAction="http://tempuri.org/IDBService/GetAllCoursesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ABCEdServicesUWP.DBServiceRef.Course>> GetAllCoursesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBService/GetEnrollmentsForStudent", ReplyAction="http://tempuri.org/IDBService/GetEnrollmentsForStudentResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ABCEdServicesUWP.DBServiceRef.Course>> GetEnrollmentsForStudentAsync(string studentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBService/getStudentsEnrolledInCourse", ReplyAction="http://tempuri.org/IDBService/getStudentsEnrolledInCourseResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ABCEdServicesUWP.DBServiceRef.Student>> getStudentsEnrolledInCourseAsync(string courseId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDBServiceChannel : ABCEdServicesUWP.DBServiceRef.IDBService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DBServiceClient : System.ServiceModel.ClientBase<ABCEdServicesUWP.DBServiceRef.IDBService>, ABCEdServicesUWP.DBServiceRef.IDBService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DBServiceClient() : 
                base(DBServiceClient.GetDefaultBinding(), DBServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.MybasicHttpBinding.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DBServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(DBServiceClient.GetBindingForEndpoint(endpointConfiguration), DBServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DBServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DBServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DBServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DBServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DBServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<int> InsertAStudentAsync(ABCEdServicesUWP.DBServiceRef.Student s) {
            return base.Channel.InsertAStudentAsync(s);
        }
        
        public System.Threading.Tasks.Task<int> InsertACourseAsync(ABCEdServicesUWP.DBServiceRef.Course c) {
            return base.Channel.InsertACourseAsync(c);
        }
        
        public System.Threading.Tasks.Task<int> InsertEnrolmentAsync(ABCEdServicesUWP.DBServiceRef.Enrollment e) {
            return base.Channel.InsertEnrolmentAsync(e);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ABCEdServicesUWP.DBServiceRef.Student>> GetAllStudentsAsync() {
            return base.Channel.GetAllStudentsAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ABCEdServicesUWP.DBServiceRef.Course>> GetAllCoursesAsync() {
            return base.Channel.GetAllCoursesAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ABCEdServicesUWP.DBServiceRef.Course>> GetEnrollmentsForStudentAsync(string studentId) {
            return base.Channel.GetEnrollmentsForStudentAsync(studentId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ABCEdServicesUWP.DBServiceRef.Student>> getStudentsEnrolledInCourseAsync(string courseId) {
            return base.Channel.getStudentsEnrolledInCourseAsync(courseId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.MybasicHttpBinding)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.MybasicHttpBinding)) {
                return new System.ServiceModel.EndpointAddress("http://abcendserviceiishost.azurewebsites.net/Service.svc/MybasicHttpBinding");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return DBServiceClient.GetBindingForEndpoint(EndpointConfiguration.MybasicHttpBinding);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return DBServiceClient.GetEndpointAddress(EndpointConfiguration.MybasicHttpBinding);
        }
        
        public enum EndpointConfiguration {
            
            MybasicHttpBinding,
        }
    }
}
